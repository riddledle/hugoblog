<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Riddle</title>
    <link>https://riddledle.github.io/hugoblog/post/</link>
    <description>Recent content in Posts on Riddle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Nov 2016 17:00:47 +0800</lastBuildDate>
    <atom:link href="https://riddledle.github.io/hugoblog/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Material Design</title>
      <link>https://riddledle.github.io/hugoblog/post/translation/Material-Design/</link>
      <pubDate>Mon, 21 Nov 2016 17:00:47 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/translation/Material-Design/</guid>
      <description>

&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;我们挑战自身，为我们的用户创造了一种将优秀设计的经典原则和科技的创新相结合的视觉语言。这就是质感设计（Material Design）。眼前这是一篇实时的文档，会随着我们不断发展质感设计的准则和细节而更新。&lt;/p&gt;

&lt;h2 id=&#34;目标&#34;&gt;目标&lt;/h2&gt;

&lt;p&gt;创造一种将优秀设计的经典原则和科技的创新相结合的视觉语言。&lt;/p&gt;

&lt;p&gt;发展一套在跨平台和跨设备时提供标准体验的底层系统。移动化准则是最基础的，但是点击，声音，鼠标和键盘等属于最高等级的输入方法。&lt;/p&gt;

&lt;h2 id=&#34;原则&#34;&gt;原则&lt;/h2&gt;

&lt;h3 id=&#34;质感是一种隐喻&#34;&gt;质感是一种隐喻&lt;/h3&gt;

&lt;p&gt;质感的隐喻是对某种规范化的空间和一套运动系统的标准化理论。质感是基于人们现实中的触觉，是被纸和墨水的研究所激起的，同时融合高科技并充满想象力与魔力。&lt;/p&gt;

&lt;p&gt;物质的平面和边界基于现实而提供视觉暗示。对人们熟悉的触觉特性的运用能够帮助用户快速理解效果。同时，在不打破物理规律的前提下，物质的灵活性能够创造出超越物理世界的一些效果。&lt;/p&gt;

&lt;p&gt;光线，表面还有运动的基础是传达物体如何运动，交互以及在空间中存在和互相关联的关键。现实中的光线能够展示缝隙，割分空间以及表现运动的部分。&lt;/p&gt;

&lt;h3 id=&#34;直截的-图形化的-有意图的&#34;&gt;直截的，图形化的，有意图的&lt;/h3&gt;

&lt;p&gt;印刷设计中的基础元素——排版，网格，留白，规格，颜色，以及图片——能够引导视觉感受。这些元素不仅仅是讨好眼球。它们缔造出层级，意义以及重点。有意图的用色，边与边紧靠的图片，大规模的排版，还有有意的留白，能够创造出一种大胆直接并且图像化的界面，使用户沉浸其中。&lt;/p&gt;

&lt;p&gt;对用户行为的强调能够使核心功能立即凸显，并且为用户提供了参考点。&lt;/p&gt;

&lt;h3 id=&#34;动作效果提供意义&#34;&gt;动作效果提供意义&lt;/h3&gt;

&lt;p&gt;动作效果尊重并加强了动作的触发者——用户。原始的用户行为是触发初始运动的点，能够重新塑造整个设计效果。&lt;/p&gt;

&lt;p&gt;所有的动作在一个整体的环境中发生。不同的对象在被呈现给用户的时候，即使是变形或者重组，也不会打破感受的连续性。&lt;/p&gt;

&lt;p&gt;动作效果是有意义并且有效的，它们为集中注意力和维持连续性服务。反馈应当细致又简练。过渡应当高效又连贯。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://material.google.com/#&#34;&gt;原文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Riddle翻译整理。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10 Differences between Customer Reporting and Data Products</title>
      <link>https://riddledle.github.io/hugoblog/post/translation/10-Differences-between-Customer-Reporting-and-Data-Products/</link>
      <pubDate>Tue, 15 Nov 2016 12:50:10 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/translation/10-Differences-between-Customer-Reporting-and-Data-Products/</guid>
      <description>&lt;p&gt;DJ Patil(U.S 数据科学主席)将数据产品定义为“通过对数据的使用促进最终成果诞生的产品”。我将数据产品描述为“彻底了解分析结果从而为顾客带去价值”。但是有个常提的问题：数据产品和我们已有的顾客报告之间有何差别？&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;不是总结数据，而是解决问题。&lt;/strong&gt;大多数报告仅仅是对数据作双向的来回讨论。一个数据产品应当从顾客的痛点出发，并且讨论如何利用数据产生对问题的透视和做出更好的决策。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不是从数据出发，而是从顾客出发。&lt;/strong&gt;报告者通常会看着获得的数据然后自问“我该怎么把所有的数据发布出去？”这会将你领入使用自我服务的分析工具而脱离数据的境地。那不好。数据产品需要首先考虑如何帮助顾客在工作中变得更聪明和更有效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不是在展示完数据后就停止，而是引导顾客执行特定动作。&lt;/strong&gt;顾客报告可能把可获得的数据展示完就满意了。数据产品需要做的更多——它们需要驱使人们采取行动。从终点来看：你希望用户做些什么？你怎么为他们提供有用的信息？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不是单纯关注数据，而是关注为了更好的决策而提供的环境背景。&lt;/strong&gt;关键的数据只有在你为它们加上适当的语境后才有益。数据产品用目标，基准，比较和趋势等语境包围数据。这样你的用户就能知道对于眼前的数据该有怎样的反应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不是顺从的展示客观性，而是提供最佳实践，可预测的模型，还有推荐。&lt;/strong&gt;“让数据为自己发言”——这就像一个主厨让用餐者品尝原材料。把你的专长带入数据产品中。你的顾客深知自己的痛——而你了解数据并知道该用它们来做什么。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不是努力展示越来越多的数据，而是精简到必需的数据。&lt;/strong&gt;涉及到展示信息的事情，太多的数据往往不是好事。顾客报告仅会膨胀——膨胀出大堆的数据板或者报告。数据产品应当努力缩减。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不是将理解的压力交给用户，而是尽力帮他们减轻负担。&lt;/strong&gt;顾客报告将责任扔给顾客，说着“你自己找到对你重要的东西。”数据产品意识到很少有人发自内心地喜欢和数据打交道；大多数人只是想将事情做得更好。数据可以帮助实现这个目标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不是为了数据分析进行设计，而是为了决策者设计数据产品。&lt;/strong&gt;许多顾客报告猜测最终的读者是希望深入挖掘和分析数据的。数据产品是针对不同的受众：那些一线决策者。这些人忙于处理日常事务，而且对学习新事物没有太大兴趣。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不是“给我看数据”，而是努力隐藏数据。&lt;/strong&gt;未来最好的数据产品将努力将数据隐藏。试想一下Google Search试图预测你的需求，将最佳答案在你的搜索结果中置顶显示。Google Search只是想将数据（搜索结果）尽力隐藏，直接呈现结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不是仅仅做企业的消费中心，而是成为盈利中心和变革者。&lt;/strong&gt;顾客报告通常被视为公司内不可缺少的邪恶一环。比如，我们和许多广告商进行了大量谈话，他们感到是被迫进行报告，并且显然并不享受这一任务。相反的，那些将顾客数据视为资产的公司，能够意识到他们将从中创造新的财富流。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://www.juiceanalytics.com/writing/10-differences-between-customer-reporting-and-data-products&#34;&gt;原文&lt;/a&gt;来自&lt;a href=&#34;http://www.juiceanalytics.com/writing/&#34;&gt;Juice Analytics&lt;/a&gt;，&lt;/p&gt;

&lt;p&gt;Riddle翻译整理。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo-静态页面引擎</title>
      <link>https://riddledle.github.io/hugoblog/post/pm/Hugo%EF%BC%8D%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%BC%95%E6%93%8E/</link>
      <pubDate>Thu, 03 Nov 2016 16:06:12 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/pm/Hugo%EF%BC%8D%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%BC%95%E6%93%8E/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;－一个快速且现代化的静态页面引擎&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;让网页恢复趣味&#34;&gt;让网页恢复趣味&lt;/h3&gt;

&lt;p&gt;介绍一下Hugo,一个实现简单网页构建的崭新方案。Hugo拥有灵活的格式，便于构建博客，文档，文集或更多。Hugo的速度培育了创造力——它令构建网站恢复趣味。&lt;/p&gt;

&lt;h3 id=&#34;随处运行&#34;&gt;随处运行&lt;/h3&gt;

&lt;p&gt;Hugo很可能是你用过的软件里最易安装的：直接下载并运行！Hugo不依赖管理员权限，数据库，运行时间，解释器，或是拓展库。Hugo生成的页面可以部署在S3，GitHub Pages，Dropbox或其它主机。&lt;/p&gt;

&lt;h3 id=&#34;快速和强大&#34;&gt;快速和强大&lt;/h3&gt;

&lt;p&gt;Hugo是为了速度和表现而生的。Hugo的构建时间被用心设计的尽可能的短。我们是指毫秒级的构建你自己网页的速度——对大多数配置而言！&lt;/p&gt;

&lt;h3 id=&#34;灵活性&#34;&gt;灵活性&lt;/h3&gt;

&lt;p&gt;Hugo配合你的工作方式。使用任何你喜欢的URL结构来组织内容。使用你自己的索引和分类来划分内容。用任何格式来定义你的元数据：YAML，TOML，JSON。最棒的是，Hugo看上去不需要额外配置即可处理这些格式差异。Hugo就这么工作。&lt;/p&gt;

&lt;h3 id=&#34;开源且免费&#34;&gt;开源且免费&lt;/h3&gt;

&lt;p&gt;Hugo是开源并且完全免费的。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;hugo是什么&#34;&gt;Hugo是什么？&lt;/h3&gt;

&lt;p&gt;Hugo是一个普适的网站框架。从技术角度讲，Hugo是静态页面生成器。与其它系统在用户每次访问一个页面时动态的生成方式不同，Hugo在你生成本地内容时完成构建。因为网页更多的是被浏览而不是被编辑，所以Hugo加强了浏览效果并且提供出色的书写体验。&lt;/p&gt;

&lt;p&gt;Hugo生成的页面是非常快速和安全的。Hugo的页面可以被放在任何地方，如Heroku,GoDaddy,DreamHost,GitHub Pages,GitLab,Surge,Aerobatic,Google Cloud Storage,Amazon S3和CloudFont，并且配合CDNs。Hugo不依赖沉重的Ruby,Python,PHP等即可运行，也不依赖任何数据库。&lt;/p&gt;

&lt;p&gt;我们认为Hugo是理想的网站构建工具。Hugo几乎实时的构建速度和随时重构的能力使它能够提供非常快速的循环反馈。这对于你的网页设计过程是非常重要的，同样，编写内容时这也是非常有用的。&lt;/p&gt;

&lt;h3 id=&#34;谁应该使用hugo&#34;&gt;谁应该使用Hugo？&lt;/h3&gt;

&lt;p&gt;Hugo适合那些偏爱在编辑器而不是浏览器里书写的人；&lt;/p&gt;

&lt;p&gt;Hugo适合那些想处理自己网站的代码同时不想为了复杂的运行时间，依赖关系和数据库烦心的人；&lt;/p&gt;

&lt;p&gt;Hugo适合那些想创建博客，企业网站，类tumblr的博客，档案集，说明文档，单页网页或者网站拥有上千页面的人。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Taiga-敏捷软件开发管理工具</title>
      <link>https://riddledle.github.io/hugoblog/post/pm/Taiga%EF%BC%8D%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Thu, 03 Nov 2016 15:08:41 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/pm/Taiga%EF%BC%8D%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://taiga.io/&#34;&gt;Taiga&lt;/a&gt;是一款敏捷软件开发和设计的项目管理工具。&lt;/p&gt;

&lt;p&gt;项目管理工具很多，Taigo针对大部分工具粗糙难看的缺点改造了自己的产品，希望以优美的设计和形态为用户带去愉快的工作体验。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-03%20%E4%B8%8B%E5%8D%883.09.25.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-07%20%E4%B8%8B%E5%8D%888.58.19.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;名词解释&#34;&gt;名词解释&lt;/h2&gt;

&lt;h3 id=&#34;product-owner-产品负责人&#34;&gt;Product Owner（产品负责人）&lt;/h3&gt;

&lt;p&gt;在敏捷开发团队里有个职位叫做Product Owner（产品负责人，或产品拥有者），它的很多职能和Product Manager（产品经理）是相通的，如产品研发、产品愿景定义、设计思考等，不同的是，所处的环境是敏捷开发，那么产品负责人更多的担当起了掌舵手的角色，需要管理用户故事和敏捷需求、管理需求优先级，发布敏捷计划、跟踪产品开发进展、管理敏捷项目合同等。&lt;/p&gt;

&lt;h3 id=&#34;user-story-用户需求&#34;&gt;&lt;strong&gt;User Story&lt;/strong&gt;（用户需求）&lt;/h3&gt;

&lt;p&gt;用户需求是从用户的角度来描述用户渴望得到的功能，即是将用户需求描述为敏捷需求的桥梁，关于如何写好用户需求，可以搜索到很多规范和要点，需要注意的是描述时不要使用技术性语言，而是通俗的描述性语言。&lt;/p&gt;

&lt;h3 id=&#34;backlog-仓库&#34;&gt;&lt;strong&gt;Backlog&lt;/strong&gt;（仓库）&lt;/h3&gt;

&lt;p&gt;一个仓库优先收集了一些未来需要使用的用户需求和任务。产品的仓库与整个产品需要完成的任务息息相关，包括那些与目前产品蓝图相符的，以及那些目前不符但是未来会需要的。&lt;/p&gt;

&lt;p&gt;也就是说，仓库会被提前规划和评估，那么团队就可以从仓库中最顶部的用户需求着手开发。&lt;/p&gt;

&lt;p&gt;堆里最顶部的用户需求，会被放进下一次的迭代里并被开发。&lt;/p&gt;

&lt;h3 id=&#34;sprint-冲刺&#34;&gt;&lt;strong&gt;Sprint&lt;/strong&gt;（冲刺）&lt;/h3&gt;

&lt;p&gt;一次冲刺是“迭代”的增量式说法。一次迭代是团队打造产品的下一次提升的过程。&lt;/p&gt;

&lt;p&gt;为了保证团队在集中处理一些用户需求时它们不会变动，我们创建了一个独立的区域叫做冲刺，团队需要在规定时间内开发和发布这部分的用户需求。当冲刺区的用户需求都被完成后，这次冲刺就算结束，可以开始下一次迭代。&lt;/p&gt;

&lt;p&gt;一个普通的工作流程是，创建一个新的冲刺，然后把用户需求里最顶部的部分拖进来，直到保证这部分用户需求在团队发挥最大工作效力的情况下，能够按时完成。当团队内部达成对这次冲刺安排的一致认同时，就可以开始冲刺了。&lt;/p&gt;

&lt;h3 id=&#34;epics-跨任务&#34;&gt;&lt;strong&gt;Epics&lt;/strong&gt;（跨任务）&lt;/h3&gt;

&lt;p&gt;如果你用敏捷开发的模式工作，那你一定听说过Epics，其实Epics没有正式的定义，不过Taiga团队还是调查出了一个比较靠谱的概念。&lt;/p&gt;

&lt;p&gt;提问：Epic和User Story之间的区别是什么？&lt;/p&gt;

&lt;p&gt;回答：准确的说，Epic是比用户需求更大的对象并且能包含许多用户需求。规划你的仓库时，你会在下面的情况注意到Epic：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用户需求太复杂，描述模糊；&lt;/li&gt;
&lt;li&gt;用户需求太庞大，无法在理想时间内实现；&lt;/li&gt;
&lt;li&gt;对于策略性规划来说Epic很有用；&lt;/li&gt;
&lt;li&gt;一个Epic通常定义比较模糊，而且可以包含许多组成部份；&lt;/li&gt;
&lt;li&gt;一个Epic是很好的为团队服务的信息容器，胜过对单独对象确立的用户需求。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;模糊来说Epics是将很多任务中有交集的部分组成一个集合，从而为这众多的项目提供策略，这便于寻找项目之间的等级关系和相关联性。&lt;/p&gt;

&lt;h3 id=&#34;scrum-迭代式&#34;&gt;Scrum（迭代式）&lt;/h3&gt;

&lt;p&gt;Scrum是项目管理中一种迭代和增进的敏捷软件开发方法。&lt;/p&gt;

&lt;p&gt;最终确定的仓库中的所有任务被划分成短小可执行的子任务并规定执行时间，直至所有任务完成。&lt;/p&gt;

&lt;h3 id=&#34;kanban-看板&#34;&gt;Kanban（看板）&lt;/h3&gt;

&lt;p&gt;看板式开发也是敏捷软件开发中的一个方法论，它将项目划分为阶段，这样便于追踪进度。&lt;/p&gt;

&lt;h2 id=&#34;随便看看&#34;&gt;随便看看&lt;/h2&gt;

&lt;h3 id=&#34;appstructurio&#34;&gt;AppStructurio&lt;/h3&gt;

&lt;p&gt;在taiga上看到一个叫做［AppStructurio］的Project，以下是一条US：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/ustory.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;描述：&lt;/p&gt;

&lt;p&gt;在主页面，我希望能够通过Facebook或者Github登入。&lt;/p&gt;

&lt;p&gt;成功认证后，我希望看到我的&lt;a href=&#34;https://cn.gravatar.com/&#34;&gt;Gravatar&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;分配：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在&lt;a href=&#34;https://auth0.com/&#34;&gt;auth0.com&lt;/a&gt;上建立项目&lt;/li&gt;
&lt;li&gt;开发登入功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;另一条UI相关的US：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/ustory2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个US是希望为Angular 2.0找到一套性感的UI组件：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;分配：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UI控件库之间的比较&lt;/li&gt;
&lt;li&gt;对最佳选择的理由陈述&lt;/li&gt;
&lt;li&gt;提交依赖到前端项目&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;appstructurio-1&#34;&gt;AppStructurio&lt;/h3&gt;

&lt;p&gt;接着从Most Active项目里面挑了一个叫做［AppStructurio］的项目：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/issues.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;看起来是个智能家居项目，某条US：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/smarthomeissue.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个涉及可视化建设的US：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;描述：&lt;/p&gt;

&lt;p&gt;作为一个顾客&lt;/p&gt;

&lt;p&gt;我希望浏览构造器&lt;/p&gt;

&lt;p&gt;这样我就可以创造一个控制面板&lt;/p&gt;

&lt;p&gt;它包含4个Action：&lt;/p&gt;

&lt;p&gt;AC-1-添加一个组件&lt;/p&gt;

&lt;p&gt;AC-2-移除一个组件&lt;/p&gt;

&lt;p&gt;AC-3-保存一个组件&lt;/p&gt;

&lt;p&gt;AC-4-取消添加一个组件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他人回复：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/comment.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;询问Taras或者Lurii我们是否需要像在地图里一样上传背景图片（？）&lt;/li&gt;
&lt;li&gt;添加控制面板整体布局和风格&lt;/li&gt;
&lt;li&gt;加载已有组件列表并根据布局排列&lt;/li&gt;
&lt;li&gt;从列表拖拽组件到控制面板的地图中&lt;/li&gt;
&lt;li&gt;展示组件信息：组件名称；当前值（摄氏度, 湿度, 开／关等）；最后更新时间；“数据”图标&lt;/li&gt;
&lt;li&gt;展示地图上组件的删除按钮（“X”）并通过点击删除&lt;/li&gt;
&lt;li&gt;处理取消动作。使用确认信息并在确认后重导页面到主页&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;处理后的面板看起来是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/smarthome.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;taiga用来敏捷开发感觉还是很对味的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trello-任务管理工具</title>
      <link>https://riddledle.github.io/hugoblog/post/pm/Trello%EF%BC%8D%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Thu, 06 Oct 2016 16:23:22 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/pm/Trello%EF%BC%8D%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>

&lt;h1 id=&#34;trello-https-trello-com&#34;&gt;&lt;a href=&#34;(https://trello.com/)&#34;&gt;Trello&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Trello提供清单式的管理方式，默认主题为稳重的蓝色调，支持google账号登录，层级非常丰富：Boards &amp;gt; Lists &amp;gt; Cards &amp;gt; Comments &amp;gt; Labels ，Slogan：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“无限灵活。使用超级方便。移动应用程序超棒。完全免费。&lt;em&gt;Trello&lt;/em&gt; 能够跟踪一切,大至图片,小至记录细节。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Trello除了用来进行团队协作，也可以帮助个人进行愿望清单的管理，比如这套Template即可用于LifeStyle的管理：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-07%20%E4%B8%8B%E5%8D%881.23.41.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;描述：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-07%20%E4%B8%8B%E5%8D%881.24.01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;实际用的时候不用这么隆重也可以，用来备忘也挺好的。&lt;/p&gt;

&lt;p&gt;看板工具用起来很飘逸，用Trello安排一些日常的小任务还是挺顺手的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DeviceOne</title>
      <link>https://riddledle.github.io/hugoblog/post/front-end/DeviceOne/</link>
      <pubDate>Sat, 17 Sep 2016 22:38:29 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/front-end/DeviceOne/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;http://www.deviceone.net/&#34;&gt;DeviceOne&lt;/a&gt; to develop an APP recently, which i find easier than React native and convenient to debug on devices.&lt;/p&gt;

&lt;p&gt;All the ui components in deviceone can be dragged and resized, each type of ui components also has its customized properties making it very quick to define a particular ui component.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using deviceone to practice writing some native javascripts codes. All the basic functions of an APP can be supported by deviceone so i think it&amp;rsquo;s a good start for me to get more familiar with native javascripts and all the ajax stuff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/do.png&#34; alt=&#34;capture&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://riddledle.github.io/hugoblog/post/front-end/Hugo/</link>
      <pubDate>Sat, 10 Sep 2016 17:28:05 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/front-end/Hugo/</guid>
      <description>

&lt;p&gt;There&amp;rsquo;re many alternatives for a blog&amp;rsquo;s generator,such as wordpress,hexo,hugo&amp;hellip;They generate static site for the user to deploy.I have typically used three types of those generators: hexo,viki,hugo.&lt;/p&gt;

&lt;h1 id=&#34;hugo-https-gohugo-io&#34;&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;Hugo is a static site generator written in Go.
Here is its repo on github:&lt;a href=&#34;https://github.com/spf13/hugo/&#34;&gt;hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This blog you are visiting is deployed on github pages thus if you want to deploy a blog like this, an assumption is that you are equipped with &lt;code&gt;Git&lt;/code&gt;, &lt;code&gt;nodejs&lt;/code&gt;,a github account,along with some knowledge of basic operations on linux.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;tutorials&lt;/a&gt; on hugo&amp;rsquo;s official site is very detailed and easy to read.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
.
|-- archetypes
|-- config.toml
|-- content
|-- data
|-- layouts
`-- static

5 directories, 1 file

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The basic file tree of a hugo directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I built up my site through this tutorial very fluently,&lt;em&gt;the only problem i encountered was on my way to deploy it on github pages&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Initially i created a new repo under the same account which dominates my lyrics collection site,and they conflicted!It turned out that the &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; link on my blog would led to a wrong way to my default repo on github.&lt;/p&gt;

&lt;p&gt;I solved this little tricky question using some kind of &amp;ldquo;brute force&amp;rdquo; strategy,i simply:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register a new github account&lt;/li&gt;
&lt;li&gt;Create a new repo for the blog&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Modified the &lt;code&gt;pagination.html&lt;/code&gt; file under &lt;code&gt;themes/layouts/partials&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reference to the official site:&lt;a href=&#34;https://gohugo.io/extras/pagination#build-the-navigation&#34;&gt;Build the navigation&lt;/a&gt;
&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/95BE7874-0B18-438E-B093-42B24C69FE16.png&#34; alt=&#34;&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here i noticed:
&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/9173F112-E758-4B22-BAA8-F781C6282ED5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;So the problem is caught!The pre and next links will locate the pages under the home directory,which caused the conflict.
I tried:
&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/D3AFC6BE-9F64-43B1-A56E-0840B3098E20.png&#34; alt=&#34;&#34; /&gt;
which can successfully solve the problem but seems a little ugly&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;pros-and-cons&#34;&gt;Pros and cons&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The theme i&amp;rsquo;m using parently is &lt;a href=&#34;http://themes.gohugo.io/cactus/&#34;&gt;cactus&lt;/a&gt;.The reason i abort hexo for hugo is that i used to think &lt;em&gt;hugo&amp;rsquo;s theme is prettier&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;hugo has no default theme thus you can use your first theme directly without changing the config file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;hugo has a &lt;code&gt;live view&lt;/code&gt; function so you can watch your changes without refresh the site.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;hugo doesn&amp;rsquo;t have an integrated &lt;code&gt;deploy&lt;/code&gt; function while hexo has the &lt;code&gt;hexo d -g&lt;/code&gt; command to deploy
the site conveniently.In hugo,you have to use the common git operations to deploy your site.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Fullpage.js</title>
      <link>https://riddledle.github.io/hugoblog/post/front-end/Fullpage-js/</link>
      <pubDate>Thu, 08 Sep 2016 19:42:29 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/front-end/Fullpage-js/</guid>
      <description>

&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/riddledle/fullPage.js&#34;&gt;Fullpage.js&lt;/a&gt;是一个多浏览器兼容的插件&lt;/p&gt;

&lt;h1 id=&#34;使用&#34;&gt;使用&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;包括jQuery library&lt;/li&gt;
&lt;li&gt;包括jquery.fullpage.js/jquery.fullpage.min.js&lt;/li&gt;

&lt;li&gt;&lt;p&gt;包括jquery.fullpage.css&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HTML结构&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
 &amp;lt;div id=&amp;quot;fullpage&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;section active&amp;quot;&amp;gt;Some section&amp;lt;/div&amp;gt; 
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Some section&amp;lt;/div&amp;gt; 
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Some section&amp;lt;/div&amp;gt; 
    &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;Some section&amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用slider&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
 &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;slide&amp;quot;&amp;gt; Slide 1 &amp;lt;/div&amp;gt; 
    &amp;lt;div class=&amp;quot;slide&amp;quot;&amp;gt; Slide 2 &amp;lt;/div&amp;gt; 
    &amp;lt;div class=&amp;quot;slide&amp;quot;&amp;gt; Slide 3 &amp;lt;/div&amp;gt; 
    &amp;lt;div class=&amp;quot;slide&amp;quot;&amp;gt; Slide 4 &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
 $(document).ready(function() { 
    $(&#39;#fullpage&#39;).fullpage(); 
 }); 
 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;插入音频/视频
使用 &lt;code&gt;data-autoplay&lt;/code&gt; 属性使音频/视频能够自动播放, &lt;code&gt;data-keepplaying&lt;/code&gt; 属性使离开某页时音频/视频继续播放。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
 &amp;lt;audio data-autoplay&amp;gt; 
    &amp;lt;source src=&amp;quot;http://metakoncept.hr/horse.ogg&amp;quot; type=&amp;quot;audio/ogg&amp;quot;&amp;gt; 
 &amp;lt;/audio&amp;gt; 
 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;实例
&lt;a href=&#34;http://www.yourprimer.com/&#34;&gt;google&lt;/a&gt;
&lt;a href=&#34;https://mcdonalds.com.au/create-your-taste&#34;&gt;McDonalds&lt;/a&gt;
&lt;a href=&#34;http://www.sony-asia.com/microsite/mdr-10/#ncPage&#34;&gt;sony&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Injecting a line break</title>
      <link>https://riddledle.github.io/hugoblog/post/front-end/%E6%8F%92%E5%85%A5%E4%B8%80%E4%B8%AA%E8%BD%AC%E8%A1%8C/</link>
      <pubDate>Thu, 08 Sep 2016 19:42:29 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/front-end/%E6%8F%92%E5%85%A5%E4%B8%80%E4%B8%AA%E8%BD%AC%E8%A1%8C/</guid>
      <description>

&lt;h1 id=&#34;如何插入一个转行-https-css-tricks-com-injecting-line-break-more-241954-来自css-tricks-com&#34;&gt;&lt;a href=&#34;https://css-tricks.com/injecting-line-break/#more-241954&#34;&gt;如何插入一个转行&lt;/a&gt;,来自CSS-TRICKS.COM&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;h1 class=&amp;quot;one&amp;quot;&amp;gt; 

  Break right after this

  &amp;lt;!-- &amp;lt;br&amp;gt; could go here, but can we do it with CSS? --&amp;gt;

  &amp;lt;span&amp;gt;
    and before this
  &amp;lt;/span&amp;gt;

&amp;lt;/h1&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;method-1-用-div-代替-span&#34;&gt;METHOD 1：用 &lt;code&gt;div&lt;/code&gt; 代替 &lt;code&gt;span&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;BUT：块级元素的设计和行内元素的设计初衷相违背；&lt;/p&gt;

&lt;h2 id=&#34;method-2-用伪元素-before-来完成-在文始加一个转义字符-a&#34;&gt;METHOD 2:用伪元素 &lt;code&gt;::before&lt;/code&gt; 来完成，在文始加一个转义字符 &lt;code&gt;\A&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
h1 span::before {

  content: &amp;quot;\A&amp;quot;;

} 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BUT：这对行内元素来说没有用。&lt;/p&gt;

&lt;h2 id=&#34;method-3-在以上方法下-使空白符有意义-即-white-space-pre&#34;&gt;METHOD 3:在以上方法下，使空白符有意义。即 &lt;code&gt;white-space:pre&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
h1.two span::before {

  content: &amp;quot;\A&amp;quot;;

  white-space: pre; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BUT：在第一行行末留下了一小块痕迹&lt;/p&gt;

&lt;h2 id=&#34;method-4-将-span-先变为块级元素-然后用伪元素-before-来写入文字-并且设计它的内边距等样式&#34;&gt;METHOD 4:将 &lt;code&gt;span&lt;/code&gt; 先变为块级元素，然后用伪元素 &lt;code&gt;::before&lt;/code&gt; 来写入文字，并且设计它的内边距等样式。&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
h1 span {

  display: block;

}

h1 span::before {

  content: attr(data-text);

  background: black;

  padding: 1px 8px;

} 

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;method-5-直接设置-span-为-display-table&#34;&gt;METHOD 5：直接设置 &lt;code&gt;span&lt;/code&gt; 为 &lt;code&gt;display:table&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
h1 span {

  display: table;

} 

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;method-6-使用-flex-box&#34;&gt;METHOD 6:使用 &lt;code&gt;flex box&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
h1.nine {

  display: flex;

  flex-direction: column;

  align-items: flex-start;

  span {

        background: black;

        padding: 1px 8px;

  }

} 

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JWplayer</title>
      <link>https://riddledle.github.io/hugoblog/post/front-end/JWplayer-developer-guide/</link>
      <pubDate>Thu, 08 Sep 2016 19:42:29 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/front-end/JWplayer-developer-guide/</guid>
      <description>

&lt;h1 id=&#34;jwplayer&#34;&gt;JWplayer&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;注册一个账号&lt;/li&gt;
&lt;li&gt;本地上传MP4/FLV/AVI格式的视频或通过视频的URL上传，至Playlist&lt;/li&gt;
&lt;li&gt;修改视频的description、tag等信息；修改Player的样式信息&lt;/li&gt;
&lt;li&gt;调出publish mode，把EMBED处的代码复制粘贴至code里（分script和iframe两种）&lt;/li&gt;
&lt;li&gt;运行调试没有问题后，在dashboard板块下的analytics里追踪视频的信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;jw-player-developer-guide-https-developer-jwplayer-com-jw-player-docs-developer-guide&#34;&gt;&lt;a href=&#34;https://developer.jwplayer.com/jw-player/docs/developer-guide/&#34;&gt;JW Player Developer Guide&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;jwplayer说明文档的developer guide的Introduction和Intro to Javascript API部分。&lt;/p&gt;

&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;Hello world！我们是JWPLAYER。我们致力于使（你这样的）开发者与设计者为网页、手机、OTT电视的观众建设、个性化、发布最佳观赏体验的视频。&lt;/p&gt;

&lt;h3 id=&#34;目标&#34;&gt;目标&lt;/h3&gt;

&lt;p&gt;我们希望提供一份使用JWPLAYER高级功能的说明文档。你将获得巩固的API和设计资源检索以加快你的播放器开发进程。&lt;/p&gt;

&lt;h3 id=&#34;目标用户&#34;&gt;目标用户&lt;/h3&gt;

&lt;p&gt;此页主要面向在工程中使用JWPLAYER的开发者和设计者。需了解标准设定和如何嵌入播放器，请参考&lt;a href=&#34;https://support.jwplayer.com/&#34;&gt;支持文档&lt;/a&gt;。如果你要浏览开发者页，则需要基础的JAVASCRIPT能力以使用API，且需要CSS知识以丰富基础的模型。&lt;/p&gt;

&lt;h3 id=&#34;结构&#34;&gt;结构&lt;/h3&gt;

&lt;p&gt;此开发指导分为两块：JAVASCRIPT API（即将到来）和视觉优化。每部分包含起步、说明文档、示例代码、小样链接、附加资源。&lt;/p&gt;

&lt;h3 id=&#34;联系我们&#34;&gt;联系我们&lt;/h3&gt;

&lt;p&gt;如果在开发者页找不到你需要的资源：
 - 我们定期管理&lt;a href=&#34;https://stackoverflow.com/questions/tagged/jwplayer&#34;&gt;StackOverflow&lt;/a&gt;上的问题。
 - 我们欢迎你为&lt;a href=&#34;https://github.com/jwplayer/jwplayer&#34;&gt;GITHUB&lt;/a&gt;上的开源代码做贡献。
 - 联系我们的TWITTER&lt;a href=&#34;https://twitter.com/JWDevelopers&#34;&gt;JWDevelopers&lt;/a&gt;。
 - 我们会通过邮件给予反馈（或者一个新的喵视频！）devrelation@jwplayer.com&lt;/p&gt;

&lt;h2 id=&#34;javascript-api简介&#34;&gt;JAVASCRIPT API简介&lt;/h2&gt;

&lt;p&gt;此文简介了如何使用JWPLAYER的&lt;a href=&#34;http://www.jwplayer.com/products/jwplayer/javascript/&#34;&gt;JAVASCRIPT API&lt;/a&gt;。它可以使你增强你嵌入的播放器的功能，或者实现丰富的页面级别的交互。除非标注，否则Flash和HTML5 的API命令没有区别，因此你的代码可以跨技术域工作。
注：我们强烈建议所有API命令在播放器准备完毕后运行。&lt;/p&gt;

&lt;h3 id=&#34;通过jwplayer-api获取信息&#34;&gt;通过JWPLAYER API获取信息&lt;/h3&gt;

&lt;p&gt;特定的API命令使用“get”前缀，标明它们的直接目的是返回特定信息。可以是对象，数组，字符串，数字。参考&lt;a href=&#34;https://developer.jwplayer.com/jw-player/docs/developer-guide/api/javascript_api_reference/&#34;&gt;Javascript API Reference&lt;/a&gt;查看返回形式。&lt;/p&gt;

&lt;h4 id=&#34;get-api命令返回如下形式信息&#34;&gt;&amp;ldquo;GET&amp;rdquo;API命令返回如下形式信息：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用jwplayer().getPlaylist()获得播放列表项目的数组；&lt;/li&gt;
&lt;li&gt;用jwplayer().getDuration()获得视频时长；&lt;/li&gt;
&lt;li&gt;用jwplayer().getsState()获得播放器状态；&lt;/li&gt;
&lt;li&gt;用jwplayer().getHeight()和jwplayer.getWidth()获得当前播放器的像素规模。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;控制和设置jwplayer-api&#34;&gt;控制和设置JWPLAYER API&lt;/h4&gt;

&lt;p&gt;以下命令用来控制播放器行为。大部分命令需要一个传入值。比如，setVolume()需要一个1-100的数字传入。&lt;/p&gt;

&lt;h4 id=&#34;api命令可以使播放器&#34;&gt;API命令可以使播放器：&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用jwplayer().pause(true)停止播放；&lt;/li&gt;
&lt;li&gt;用jwplayer().setVolume(50)设置音量为50%；&lt;/li&gt;
&lt;li&gt;用jwplayer().seek(120)获得视频2分钟的位置。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;通过jwplayer-api实现事件监听&#34;&gt;通过JWPLAYER API实现事件监听&lt;/h3&gt;

&lt;p&gt;播放器做什么的时候会触发特定事件。JWP7基于&lt;a href=&#34;http://backbonejs.org/#Events&#34;&gt;backbone.events&lt;/a&gt;实现事件结构。使一个播放器实例成为事件引导并给予开发者更好的选项和控制。特定事件同样返回信息。指定信息在&lt;a href=&#34;https://developer.jwplayer.com/jw-player/docs/developer-guide/api/javascript_api_reference/&#34;&gt;javascript API reference&lt;/a&gt;文档中。
目前JWP支持以下事件驱动：
&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/listener.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以下事件驱动在每次音量改动时触发，并返回一个带名叫&amp;rdquo;volume&amp;rdquo;的数字的对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
jwplayer().on(&#39;volume&#39;, function(e) {

    alert(&amp;quot;Volume is changed to: &amp;quot;+ e.volume);

                                    });

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;示例-使用jwp&#34;&gt;示例：使用JWP&lt;/h3&gt;

&lt;p&gt;player setup需要在实现播放器互动前安装。&lt;a href=&#34;https://support.jwplayer.com/customer/portal/topics/601065-embedding/articles&#34;&gt;Embedding Section&lt;/a&gt;包含许多例子。这是一个基础播放器嵌入的标准语法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;div id=&#39;myElement&#39;&amp;gt;Loading the player...&amp;lt;/div&amp;gt; 

&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;

jwplayer(&amp;quot;myElement&amp;quot;).setup({ 

    &amp;quot;file&amp;quot;: &amp;quot;/uploads/example.mp4&amp;quot;, 

    &amp;quot;image&amp;quot;: &amp;quot;/uploads/example.jpg&amp;quot;

});

&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦实现setup，API立刻就能用。如果你的页面内有一个播放器，它总能被playerInstance函数获取。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;script&amp;gt;

jwplayer(&amp;quot;myElement&amp;quot;).on(&#39;complete&#39;, function(){

    alert(&amp;quot;Complete fired - Your content has completed!&amp;quot;);

});

&amp;lt;/script&amp;gt;

&amp;lt;a href=&amp;quot;javascript:jwplayer(&#39;myElement&#39;).play();&amp;quot;&amp;gt;Toggle playback&amp;lt;/a&amp;gt;

&amp;lt;a href=&amp;quot;javascript:alert(&#39;The volume of the player is: &#39; + jwplayer(&#39;myElement&#39;).getVolume());&amp;quot;&amp;gt;Report volume&amp;lt;/a&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;多个播放器下指定&#34;&gt;多个播放器下指定&lt;/h3&gt;

&lt;p&gt;当页面内有多个播放器，你需要指定你要和哪个交互。假设我们一个页面内嵌入了两个不同的播放器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;div id=&#39;myFirstPlayer&#39;&amp;gt;Loading the first player...&amp;lt;/div&amp;gt;

&amp;lt;div id=&#39;mySecondPlayer&#39;&amp;gt;Loading the player...&amp;lt;/div&amp;gt;


&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;

jwplayer(&amp;quot;myFirstPlayer&amp;quot;).setup({ 

    &amp;quot;file&amp;quot;: &amp;quot;/uploads/example.mp4&amp;quot;, 

    &amp;quot;image&amp;quot;: &amp;quot;/uploads/example.jpg&amp;quot;

});

jwplayer(&amp;quot;mySecondPlayer&amp;quot;).setup({ 

    &amp;quot;file&amp;quot;: &amp;quot;/uploads/example2.mp4&amp;quot;, 

    &amp;quot;image&amp;quot;: &amp;quot;/uploads/example2.jpg&amp;quot;

});

&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有两种方法来指定一个播放器：
 * 使用div的id&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
// ID references the first player

jwplayer(&amp;quot;myFirstPlayer&amp;quot;).play();

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;使用播放器index&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
// An index of 1 targets the second player on the page 

jwplayer(1).play();

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：什么都不标明的话，将指向页面内第一个播放器。&lt;/p&gt;

&lt;h3 id=&#34;require-js和jwplayer&#34;&gt;Require.js和JWPLAYER&lt;/h3&gt;

&lt;p&gt;JWPLAYER目前不被require js支持因为JWPLAYER需要自己的命名空间。避免require和jwplayer.js在同一页面时的问题，在require.js之前加载jwplayer.js。
例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;script src=&#39;jwplayer.js&#39;&amp;gt;

&amp;lt;script src=&#39;requirejs.js&#39;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;小记表&#34;&gt;小记表&lt;/h3&gt;

&lt;p&gt;这张表是所有API命令的小抄。&lt;a href=&#34;https://developer.jwplayer.com/jw-player/docs/developer-guide/api/javascript_api_reference/&#34;&gt;JAVASCRIPT API Reference&lt;/a&gt;包含了所有API命令的参数。点击相应类名转到对应查询。为了简化，我们只介绍on事件。如上所述，还可以是off,once,trigger事件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720160524153029.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/sheet2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandoc</title>
      <link>https://riddledle.github.io/hugoblog/post/front-end/Pandoc/</link>
      <pubDate>Thu, 08 Sep 2016 19:42:29 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/front-end/Pandoc/</guid>
      <description>

&lt;h1 id=&#34;使用-pandoc-http-www-pandoc-org-getting-started-html-实现markdown文件和html文件之间的转换&#34;&gt;使用&lt;a href=&#34;http://www.pandoc.org/getting-started.html&#34;&gt;Pandoc&lt;/a&gt;实现markdown文件和html文件之间的转换。&lt;/h1&gt;

&lt;h1 id=&#34;参考官方文档-以windows系统为例&#34;&gt;参考官方文档，以windows系统为例。&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;安装。（WIN8系统下建议在命令提示符下以管理员身份运行安装程序）&lt;/li&gt;
&lt;li&gt;打开命令提示符&lt;/li&gt;
&lt;li&gt;切换目录。&lt;/li&gt;
&lt;li&gt;cd Documents 至文档目录下&lt;/li&gt;
&lt;li&gt;mkdir &amp;lt;目录名&amp;gt; 新建目录文件夹&lt;/li&gt;
&lt;li&gt;在命令行转换。&lt;/li&gt;
&lt;li&gt;输入pandoc&lt;/li&gt;
&lt;li&gt;输入markdown/html语法文档

&lt;ul&gt;
&lt;li&gt;按下Ctrl-Z，回车
(默认是认为传入markdown语法，转换为html语法)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;使用编辑器在目录下编辑一个文件&lt;/li&gt;
&lt;li&gt;使用语法&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; 
 pandoc test1.md -f markdown -t html -s -o test1.html 
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转换&lt;/p&gt;

&lt;h1 id=&#34;查看-user-s-guide-http-www-pandoc-org-readme-html-获取更多关于转换格式的内容&#34;&gt;查看&lt;a href=&#34;http://www.pandoc.org/README.html&#34;&gt;User&amp;rsquo;s Guide&lt;/a&gt;获取更多关于转换格式的内容。&lt;/h1&gt;

&lt;p&gt;若是想转为PDF格式，需要&lt;a href=&#34;http://www.latex-project.org/&#34;&gt;Latex&lt;/a&gt;支持。&lt;/p&gt;

&lt;h1 id=&#34;将markdown文件转换为pdf文件则可以使用-mdcharm-http-www-mdcharm-com&#34;&gt;将markdown文件转换为pdf文件则可以使用&lt;a href=&#34;http://www.mdcharm.com/&#34;&gt;MdCharm&lt;/a&gt;。&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Responsive Design</title>
      <link>https://riddledle.github.io/hugoblog/post/front-end/responsive-design_Responsive-Design/</link>
      <pubDate>Thu, 08 Sep 2016 19:42:29 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/front-end/responsive-design_Responsive-Design/</guid>
      <description>

&lt;h1 id=&#34;responsive-design-tutorial-http-webdesignerwall-com-tutorials-responsive-design-with-css3-media-queries&#34;&gt;&lt;a href=&#34;http://webdesignerwall.com/tutorials/responsive-design-with-css3-media-queries&#34;&gt;Responsive Design Tutorial&lt;/a&gt;&lt;/h1&gt;

&lt;h1 id=&#34;导语&#34;&gt;导语&lt;/h1&gt;

&lt;p&gt;如今屏幕分辨率从320px（iPhone）到2560px(大显示器)甚至更高。用户不仅仅通过桌面电脑浏览网页。用户会使用手机，小型笔记本，或是iPad，Playbook来上网。所以传统页面再也不适用了。网页设计要自适应。布局需要自动适应不同分辨率设备。这是一篇让你用H5和CSS3 media queries来设计跨浏览器响应式布局的指导。&lt;/p&gt;

&lt;h1 id=&#34;先来看看效果&#34;&gt;先来看看效果&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/image/hexo/final-demo.jpg&#34; alt=&#34;&#34; /&gt;
开始之前来看看&lt;a href=&#34;http://webdesignerwall.com/demo/adaptive-design/final.html&#34;&gt;最终小样&lt;/a&gt;,改变你的浏览器大小查看页面是如何适应不同的视口宽度。&lt;/p&gt;

&lt;h1 id=&#34;概览&#34;&gt;概览&lt;/h1&gt;

&lt;p&gt;这个页面的container宽为980px，为任何大于1024px的分辨率达到最优。Media queary检查视口是否窄于980px,是则转固定宽度为流动宽度。低于650px，内容框和侧框将占满屏宽，并形成一列。
&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/image/hexo/design-overview.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;html-code&#34;&gt;HTML CODE&lt;/h1&gt;

&lt;p&gt;我不会详细分析这个代码，这是布局的结构。我用pagewrap来包含header,content,sidebar,footer。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/recode.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我在小样里用了H5，为IE9以下版本增加html5.js:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;!--[if lt IE 9]&amp;gt;

&amp;lt;script src=&amp;quot;http://html5shim.googlecode.com/svn/trunk/html5.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;![endif]--&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;css&#34;&gt;CSS&lt;/h1&gt;

&lt;p&gt;用以下的CSS将H5元素重设为block。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { 

    display: block;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;主pagewrap宽980px，header固定高160px，content是600px宽，左浮动。sidebar是280px宽右浮动。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#pagewrap {

    width: 980px;

    margin: 0 auto;

}

#header {

    height: 160px;

}

#content {

    width: 600px;

    float: left;

}


#sidebar {

    width: 280px;

    float: right;

}

#footer {

    clear: both;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;css3-media-query&#34;&gt;CSS3&amp;amp;media query&lt;/h1&gt;

&lt;p&gt;现在来到有趣的部分 - Media query。
IE8以下不支持,因而加入Media queries javascript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;!--[if lt IE 9]&amp;gt;

    &amp;lt;script src=&amp;quot;http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;![endif]--&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建media queries的新样式表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;link href=&amp;quot;media-queries.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;窄于980px的视口(流动布局)&lt;/p&gt;

&lt;p&gt;应用以下规则：&lt;/p&gt;

&lt;p&gt;pagewrap = 重设宽为 95%&lt;/p&gt;

&lt;p&gt;content = 重设为 60%&lt;/p&gt;

&lt;p&gt;sidebar = 重设为 30%&lt;/p&gt;

&lt;p&gt;提示：用百分比设置来使容器流动。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
@media screen and (max-width: 980px) {

    #pagewrap {

        width: 95%;

    }

    #content {

        width: 60%;

        padding: 3% 4%;

    }

    #sidebar {

        width: 30%;

    }

    #sidebar .widget {

        padding: 8% 7%;

        margin-bottom: 10px;

    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;小于650Px的视口(单独成列布局)&lt;/p&gt;

&lt;p&gt;header = 重设高度为auto&lt;/p&gt;

&lt;p&gt;searchform = 将searchform重定位于据顶部5px&lt;/p&gt;

&lt;p&gt;main-nav = 重设position为static&lt;/p&gt;

&lt;p&gt;site-logo = 重设position为static&lt;/p&gt;

&lt;p&gt;site-description = 重设position为static&lt;/p&gt;

&lt;p&gt;content = 重设宽度为auto(这将使宽度为满宽)并且脱离流&lt;/p&gt;

&lt;p&gt;sidebar = 重设宽度为100%并且脱离流&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@media screen and (max-width: 650px) {

    #header {

        height: auto;

    }


    #searchform {

        position: absolute;

        top: 5px;

        right: 0;

    }


    #main-nav {

        position: static;

    }

    #site-logo {

        margin: 15px 100px 5px 0;

        position: static;

    }

    #site-description {

        margin: 0 0 15px;

        position: static;

    }

    #content {

        width: auto;

        float: none;

        margin: 20px 0;
    }

    #sidebar {

        width: 100%;

        float: none;

        margin: 0;
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;窄于480px的视口&lt;/p&gt;

&lt;p&gt;iPhone横置状态下&lt;/p&gt;

&lt;p&gt;html = 禁用字体自适应。iPhone默认自动调节字体使你阅读得更舒服。你可以禁用它，用-webkit-text-size-adjust: none;语句。&lt;/p&gt;

&lt;p&gt;main-nav = 重设字体大小为90%&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
@media screen and (max-width: 480px) {

    html {

        -webkit-text-size-adjust: none;

    }

    #main-nav a {

        font-size: 90%;

        padding: 10px 8px;

    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;灵活的图片&lt;/p&gt;

&lt;p&gt;为了使图片灵活，只需设置max-width = 100%，height = auto。&lt;/p&gt;

&lt;p&gt;IE8不支持，添加width:auto\9；&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
img {

    max-width: 100%;

    height: auto;

    width: auto\9; /* ie8 */

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;灵活的音频&lt;/p&gt;

&lt;p&gt;如上。&lt;/p&gt;

&lt;p&gt;Safari用width:100%代替。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
.video embed,

.video object,

.video iframe {

    width: 100%;

    height: auto;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初始化scale meta标签(iPhone)&lt;/p&gt;

&lt;p&gt;默认下iPhone的Safari收缩HTML页面来适应屏幕。以下标签使之将设备屏宽定为页面视口宽度，取消初始规模。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width; initial-scale=1.0&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;

&lt;p&gt;不支持media queries的浏览器添加此js：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;!--[if lt IE 9]&amp;gt;
    
&amp;lt;script src=&amp;quot;http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;![endif]--&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应式设计的技巧即是根据视口宽度重载布局结构的CSS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
@media screen and (max-width: 560px) {

    #content {

        width: auto;

        float: none;

    }


    #sidebar {

        width: 100%;

        float: none;
    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;灵活的图片&amp;amp;音频&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
max-width:100% height:auto

img {

    max-width: 100%;

    height: auto;

    width: auto\9; /* ie8 */

}

-webkit-text-size-adjust:none来应付iPhone的字体调节

html {

    -webkit-text-size-adjust: none;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重置iPhone的视口和初始规模&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width; initial-scale=1.0&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Some fonts reference</title>
      <link>https://riddledle.github.io/hugoblog/post/front-end/Hexo%E5%AD%97%E4%BD%93%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Thu, 08 Sep 2016 19:42:29 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/front-end/Hexo%E5%AD%97%E4%BD%93%E4%BF%AE%E6%94%B9/</guid>
      <description>

&lt;h1 id=&#34;some-fonts-references&#34;&gt;Some fonts references&lt;/h1&gt;

&lt;h2 id=&#34;chinese-fonts&#34;&gt;Chinese fonts&lt;/h2&gt;

&lt;p&gt;Typically chinese font names are not allowed in css thus use the following sheet as a reference:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
 新细明体：PMingLiU  
 细明体：MingLiU 
 标楷体：DFKai-SB  
 黑体：SimHei 
 宋体：SimSun 
 新宋体：NSimSun  
 仿宋：FangSong  
 楷体：KaiTi 
 仿宋_GB2312：FangSong_GB2312  
 楷体_GB2312：KaiTi_GB2312 
 微软正黑体：Microsoft JhengHei  
 微软雅黑体：Microsoft YaHei  

 隶书：LiSu 
 幼圆：YouYuan 
 华文细黑：STXihei 
 华文楷体：STKaiti  
 华文宋体：STSong 
 华文中宋：STZhongsong  
 华文仿宋：STFangsong  
 方正舒体：FZShuTi  
 方正姚体：FZYaoti  
 华文彩云：STCaiyun  
 华文琥珀：STHupo 
 华文隶书：STLiti 
 华文行楷：STXingkai  
 华文新魏：STXinwei  

 华文细黑：STHeiti Light [STXihei]  
 华文黑体：STHeiti 
 华文楷体：STKaiti 
 华文宋体：STSong 
 华文仿宋：STFangsong 
 丽黑 Pro：LiHei Pro Medium 
 丽宋 Pro：LiSong Pro Light  
 标楷体：BiauKai 
 苹果丽中黑：Apple LiGothic Medium  
 苹果丽细宋：Apple LiSung Light 
 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;download-fonts&#34;&gt;Download fonts&lt;/h2&gt;

&lt;p&gt;Choose fonts from these websites and download for free
&lt;a href=&#34;www.showfont.net&#34;&gt;showfont&lt;/a&gt;
&lt;a href=&#34;www.dafont.com&#34;&gt;dafont&lt;/a&gt;
&lt;a href=&#34;www.ddfont.com&#34;&gt;ddfont&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;modifying-hexo&#34;&gt;Modifying(hexo)&lt;/h1&gt;

&lt;p&gt;Modify the corresponding css files in themes/layout directories has been failed on my machine.
I made it by changing the style.css file in &amp;lsquo;public&amp;rsquo;folder in my hexo directory.
Basically add the font name which you want to use in &amp;lsquo;font-family&amp;rsquo; attr before any other font names.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VIKI页面</title>
      <link>https://riddledle.github.io/hugoblog/post/front-end/viki/</link>
      <pubDate>Thu, 08 Sep 2016 19:42:29 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/front-end/viki/</guid>
      <description>

&lt;h1 id=&#34;安装viki&#34;&gt;安装VIKI&lt;/h1&gt;

&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;

&lt;p&gt;Vim+deplate&lt;/p&gt;

&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;编辑一套模板，可参考&lt;a href=&#34;http://edyfox.codecarver.org/html/viki_template.html&#34;&gt;edyfox&lt;/a&gt;的。&lt;/li&gt;
&lt;li&gt;创建.viki文件，可以TAG_FILENAME.VIKI格式命名。&lt;/li&gt;
&lt;li&gt;使用Vim编辑。可在开头第一行加入#TITLE: TITLE 指定页面标题，第二行加入#KEYWORDS: KEYWORDS 指定该页标签&lt;/li&gt;
&lt;li&gt;使用VIKI语法撰写页面内容&lt;/li&gt;
&lt;li&gt;在命令行执行deplate -t TEMPLATE.html &amp;ndash;css CSSNAME FILENAME.viki生成html文件；也可执行此&lt;a href=&#34;http://edyfox.codecarver.org/html/viki_script.html#labVikiScript&#34;&gt;编译脚本&lt;/a&gt;批量编译

&lt;ul&gt;
&lt;li&gt;注意输出目录。可修改TARGET_DIR一行&lt;/li&gt;
&lt;li&gt;注意文字编码。可修改ARGS一行
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>https://riddledle.github.io/hugoblog/post/front-end/Vim/</link>
      <pubDate>Thu, 08 Sep 2016 19:42:29 +0800</pubDate>
      
      <guid>https://riddledle.github.io/hugoblog/post/front-end/Vim/</guid>
      <description>

&lt;h1 id=&#34;使用vim&#34;&gt;使用Vim&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vim.org/download.php&#34;&gt;Vim&lt;/a&gt;是一款Linux上的优秀经典的文本/代码编辑器。gVim是其Windows版。&lt;/p&gt;

&lt;p&gt;最大特色是完全使用键盘命令进行编辑，脱离鼠标操作。&lt;/p&gt;

&lt;p&gt;安装完成后使用:help tutor命令或者从安装目录Vim/vim74/tutor下打开说明文档（可选中文版）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.vgod.tw.s3.amazonaws.com/wp-content/uploads/2014/08/vgod-vim-cheat-sheet-full.pdf&#34;&gt;一张Vim命令图解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/vimbg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;配置&#34;&gt;配置&lt;/h1&gt;

&lt;p&gt;配置使用时编写一份自己的.vimrc，Vim便不会再加载系统默认的配置文件。可在配置中编写字体样式，配色方案，文档格式，键盘操作等。&lt;/p&gt;

&lt;h1 id=&#34;插件&#34;&gt;插件&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vim.org/scripts/index.php&#34;&gt;Vim插件&lt;/a&gt;丰富。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;vimperator.org&#34;&gt;Vimperator&lt;/a&gt;是Firefox上一款类Vim操作的界面交互插件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/vimp.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://o7o0hlenq.bkt.clouddn.com/vimperator_hints.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>